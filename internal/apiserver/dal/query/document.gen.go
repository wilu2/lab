// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.intsig.net/textin-gateway/internal/apiserver/dal/model"
)

func newDocument(db *gorm.DB, opts ...gen.DOOption) document {
	_document := document{}

	_document.documentDo.UseDB(db, opts...)
	_document.documentDo.UseModel(&model.Document{})

	tableName := _document.documentDo.TableName()
	_document.ALL = field.NewAsterisk(tableName)
	_document.ID = field.NewInt32(tableName, "id")
	_document.Content = field.NewString(tableName, "content")

	_document.fillFieldMap()

	return _document
}

type document struct {
	documentDo documentDo

	ALL     field.Asterisk
	ID      field.Int32
	Content field.String

	fieldMap map[string]field.Expr
}

func (d document) Table(newTableName string) *document {
	d.documentDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d document) As(alias string) *document {
	d.documentDo.DO = *(d.documentDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *document) updateTableName(table string) *document {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.Content = field.NewString(table, "content")

	d.fillFieldMap()

	return d
}

func (d *document) WithContext(ctx context.Context) *documentDo { return d.documentDo.WithContext(ctx) }

func (d document) TableName() string { return d.documentDo.TableName() }

func (d document) Alias() string { return d.documentDo.Alias() }

func (d *document) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *document) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 2)
	d.fieldMap["id"] = d.ID
	d.fieldMap["content"] = d.Content
}

func (d document) clone(db *gorm.DB) document {
	d.documentDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d document) replaceDB(db *gorm.DB) document {
	d.documentDo.ReplaceDB(db)
	return d
}

type documentDo struct{ gen.DO }

func (d documentDo) Debug() *documentDo {
	return d.withDO(d.DO.Debug())
}

func (d documentDo) WithContext(ctx context.Context) *documentDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d documentDo) ReadDB() *documentDo {
	return d.Clauses(dbresolver.Read)
}

func (d documentDo) WriteDB() *documentDo {
	return d.Clauses(dbresolver.Write)
}

func (d documentDo) Session(config *gorm.Session) *documentDo {
	return d.withDO(d.DO.Session(config))
}

func (d documentDo) Clauses(conds ...clause.Expression) *documentDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d documentDo) Returning(value interface{}, columns ...string) *documentDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d documentDo) Not(conds ...gen.Condition) *documentDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d documentDo) Or(conds ...gen.Condition) *documentDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d documentDo) Select(conds ...field.Expr) *documentDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d documentDo) Where(conds ...gen.Condition) *documentDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d documentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *documentDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d documentDo) Order(conds ...field.Expr) *documentDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d documentDo) Distinct(cols ...field.Expr) *documentDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d documentDo) Omit(cols ...field.Expr) *documentDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d documentDo) Join(table schema.Tabler, on ...field.Expr) *documentDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d documentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *documentDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d documentDo) RightJoin(table schema.Tabler, on ...field.Expr) *documentDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d documentDo) Group(cols ...field.Expr) *documentDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d documentDo) Having(conds ...gen.Condition) *documentDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d documentDo) Limit(limit int) *documentDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d documentDo) Offset(offset int) *documentDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d documentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *documentDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d documentDo) Unscoped() *documentDo {
	return d.withDO(d.DO.Unscoped())
}

func (d documentDo) Create(values ...*model.Document) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d documentDo) CreateInBatches(values []*model.Document, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d documentDo) Save(values ...*model.Document) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d documentDo) First() (*model.Document, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Document), nil
	}
}

func (d documentDo) Take() (*model.Document, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Document), nil
	}
}

func (d documentDo) Last() (*model.Document, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Document), nil
	}
}

func (d documentDo) Find() ([]*model.Document, error) {
	result, err := d.DO.Find()
	return result.([]*model.Document), err
}

func (d documentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Document, err error) {
	buf := make([]*model.Document, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d documentDo) FindInBatches(result *[]*model.Document, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d documentDo) Attrs(attrs ...field.AssignExpr) *documentDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d documentDo) Assign(attrs ...field.AssignExpr) *documentDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d documentDo) Joins(fields ...field.RelationField) *documentDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d documentDo) Preload(fields ...field.RelationField) *documentDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d documentDo) FirstOrInit() (*model.Document, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Document), nil
	}
}

func (d documentDo) FirstOrCreate() (*model.Document, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Document), nil
	}
}

func (d documentDo) FindByPage(offset int, limit int) (result []*model.Document, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d documentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d documentDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d documentDo) Delete(models ...*model.Document) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *documentDo) withDO(do gen.Dao) *documentDo {
	d.DO = *do.(*gen.DO)
	return d
}
