// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.intsig.net/textin-gateway/internal/apiserver/dal/model"
)

func newApisixUpstream(db *gorm.DB, opts ...gen.DOOption) apisixUpstream {
	_apisixUpstream := apisixUpstream{}

	_apisixUpstream.apisixUpstreamDo.UseDB(db, opts...)
	_apisixUpstream.apisixUpstreamDo.UseModel(&model.ApisixUpstream{})

	tableName := _apisixUpstream.apisixUpstreamDo.TableName()
	_apisixUpstream.ALL = field.NewAsterisk(tableName)
	_apisixUpstream.ID = field.NewInt32(tableName, "id")
	_apisixUpstream.StreamID = field.NewString(tableName, "stream_id")
	_apisixUpstream.Content = field.NewString(tableName, "content")
	_apisixUpstream.ContentYaml = field.NewString(tableName, "content_yaml")
	_apisixUpstream.Type = field.NewInt16(tableName, "type")
	_apisixUpstream.CreateAt = field.NewTime(tableName, "create_at")
	_apisixUpstream.UpdateAt = field.NewTime(tableName, "update_at")

	_apisixUpstream.fillFieldMap()

	return _apisixUpstream
}

type apisixUpstream struct {
	apisixUpstreamDo apisixUpstreamDo

	ALL         field.Asterisk
	ID          field.Int32
	StreamID    field.String
	Content     field.String
	ContentYaml field.String
	Type        field.Int16
	CreateAt    field.Time
	UpdateAt    field.Time

	fieldMap map[string]field.Expr
}

func (a apisixUpstream) Table(newTableName string) *apisixUpstream {
	a.apisixUpstreamDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a apisixUpstream) As(alias string) *apisixUpstream {
	a.apisixUpstreamDo.DO = *(a.apisixUpstreamDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *apisixUpstream) updateTableName(table string) *apisixUpstream {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.StreamID = field.NewString(table, "stream_id")
	a.Content = field.NewString(table, "content")
	a.ContentYaml = field.NewString(table, "content_yaml")
	a.Type = field.NewInt16(table, "type")
	a.CreateAt = field.NewTime(table, "create_at")
	a.UpdateAt = field.NewTime(table, "update_at")

	a.fillFieldMap()

	return a
}

func (a *apisixUpstream) WithContext(ctx context.Context) *apisixUpstreamDo {
	return a.apisixUpstreamDo.WithContext(ctx)
}

func (a apisixUpstream) TableName() string { return a.apisixUpstreamDo.TableName() }

func (a apisixUpstream) Alias() string { return a.apisixUpstreamDo.Alias() }

func (a *apisixUpstream) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *apisixUpstream) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["stream_id"] = a.StreamID
	a.fieldMap["content"] = a.Content
	a.fieldMap["content_yaml"] = a.ContentYaml
	a.fieldMap["type"] = a.Type
	a.fieldMap["create_at"] = a.CreateAt
	a.fieldMap["update_at"] = a.UpdateAt
}

func (a apisixUpstream) clone(db *gorm.DB) apisixUpstream {
	a.apisixUpstreamDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a apisixUpstream) replaceDB(db *gorm.DB) apisixUpstream {
	a.apisixUpstreamDo.ReplaceDB(db)
	return a
}

type apisixUpstreamDo struct{ gen.DO }

func (a apisixUpstreamDo) Debug() *apisixUpstreamDo {
	return a.withDO(a.DO.Debug())
}

func (a apisixUpstreamDo) WithContext(ctx context.Context) *apisixUpstreamDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a apisixUpstreamDo) ReadDB() *apisixUpstreamDo {
	return a.Clauses(dbresolver.Read)
}

func (a apisixUpstreamDo) WriteDB() *apisixUpstreamDo {
	return a.Clauses(dbresolver.Write)
}

func (a apisixUpstreamDo) Session(config *gorm.Session) *apisixUpstreamDo {
	return a.withDO(a.DO.Session(config))
}

func (a apisixUpstreamDo) Clauses(conds ...clause.Expression) *apisixUpstreamDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a apisixUpstreamDo) Returning(value interface{}, columns ...string) *apisixUpstreamDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a apisixUpstreamDo) Not(conds ...gen.Condition) *apisixUpstreamDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a apisixUpstreamDo) Or(conds ...gen.Condition) *apisixUpstreamDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a apisixUpstreamDo) Select(conds ...field.Expr) *apisixUpstreamDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a apisixUpstreamDo) Where(conds ...gen.Condition) *apisixUpstreamDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a apisixUpstreamDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *apisixUpstreamDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a apisixUpstreamDo) Order(conds ...field.Expr) *apisixUpstreamDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a apisixUpstreamDo) Distinct(cols ...field.Expr) *apisixUpstreamDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a apisixUpstreamDo) Omit(cols ...field.Expr) *apisixUpstreamDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a apisixUpstreamDo) Join(table schema.Tabler, on ...field.Expr) *apisixUpstreamDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a apisixUpstreamDo) LeftJoin(table schema.Tabler, on ...field.Expr) *apisixUpstreamDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a apisixUpstreamDo) RightJoin(table schema.Tabler, on ...field.Expr) *apisixUpstreamDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a apisixUpstreamDo) Group(cols ...field.Expr) *apisixUpstreamDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a apisixUpstreamDo) Having(conds ...gen.Condition) *apisixUpstreamDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a apisixUpstreamDo) Limit(limit int) *apisixUpstreamDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a apisixUpstreamDo) Offset(offset int) *apisixUpstreamDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a apisixUpstreamDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *apisixUpstreamDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a apisixUpstreamDo) Unscoped() *apisixUpstreamDo {
	return a.withDO(a.DO.Unscoped())
}

func (a apisixUpstreamDo) Create(values ...*model.ApisixUpstream) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a apisixUpstreamDo) CreateInBatches(values []*model.ApisixUpstream, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a apisixUpstreamDo) Save(values ...*model.ApisixUpstream) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a apisixUpstreamDo) First() (*model.ApisixUpstream, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApisixUpstream), nil
	}
}

func (a apisixUpstreamDo) Take() (*model.ApisixUpstream, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApisixUpstream), nil
	}
}

func (a apisixUpstreamDo) Last() (*model.ApisixUpstream, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApisixUpstream), nil
	}
}

func (a apisixUpstreamDo) Find() ([]*model.ApisixUpstream, error) {
	result, err := a.DO.Find()
	return result.([]*model.ApisixUpstream), err
}

func (a apisixUpstreamDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ApisixUpstream, err error) {
	buf := make([]*model.ApisixUpstream, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a apisixUpstreamDo) FindInBatches(result *[]*model.ApisixUpstream, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a apisixUpstreamDo) Attrs(attrs ...field.AssignExpr) *apisixUpstreamDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a apisixUpstreamDo) Assign(attrs ...field.AssignExpr) *apisixUpstreamDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a apisixUpstreamDo) Joins(fields ...field.RelationField) *apisixUpstreamDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a apisixUpstreamDo) Preload(fields ...field.RelationField) *apisixUpstreamDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a apisixUpstreamDo) FirstOrInit() (*model.ApisixUpstream, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApisixUpstream), nil
	}
}

func (a apisixUpstreamDo) FirstOrCreate() (*model.ApisixUpstream, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApisixUpstream), nil
	}
}

func (a apisixUpstreamDo) FindByPage(offset int, limit int) (result []*model.ApisixUpstream, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a apisixUpstreamDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a apisixUpstreamDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a apisixUpstreamDo) Delete(models ...*model.ApisixUpstream) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *apisixUpstreamDo) withDO(do gen.Dao) *apisixUpstreamDo {
	a.DO = *do.(*gen.DO)
	return a
}
