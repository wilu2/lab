// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.intsig.net/textin-gateway/internal/apiserver/dal/model"
)

func newVersion(db *gorm.DB, opts ...gen.DOOption) version {
	_version := version{}

	_version.versionDo.UseDB(db, opts...)
	_version.versionDo.UseModel(&model.Version{})

	tableName := _version.versionDo.TableName()
	_version.ALL = field.NewAsterisk(tableName)
	_version.ID = field.NewInt32(tableName, "id")
	_version.ServiceID = field.NewInt32(tableName, "service_id")
	_version.Version = field.NewString(tableName, "version")
	_version.UpstreamMap = field.NewField(tableName, "upstream_map")

	_version.fillFieldMap()

	return _version
}

type version struct {
	versionDo versionDo

	ALL         field.Asterisk
	ID          field.Int32
	ServiceID   field.Int32
	Version     field.String
	UpstreamMap field.Field

	fieldMap map[string]field.Expr
}

func (v version) Table(newTableName string) *version {
	v.versionDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v version) As(alias string) *version {
	v.versionDo.DO = *(v.versionDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *version) updateTableName(table string) *version {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt32(table, "id")
	v.ServiceID = field.NewInt32(table, "service_id")
	v.Version = field.NewString(table, "version")
	v.UpstreamMap = field.NewField(table, "upstream_map")

	v.fillFieldMap()

	return v
}

func (v *version) WithContext(ctx context.Context) *versionDo { return v.versionDo.WithContext(ctx) }

func (v version) TableName() string { return v.versionDo.TableName() }

func (v version) Alias() string { return v.versionDo.Alias() }

func (v *version) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *version) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 4)
	v.fieldMap["id"] = v.ID
	v.fieldMap["service_id"] = v.ServiceID
	v.fieldMap["version"] = v.Version
	v.fieldMap["upstream_map"] = v.UpstreamMap
}

func (v version) clone(db *gorm.DB) version {
	v.versionDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v version) replaceDB(db *gorm.DB) version {
	v.versionDo.ReplaceDB(db)
	return v
}

type versionDo struct{ gen.DO }

func (v versionDo) Debug() *versionDo {
	return v.withDO(v.DO.Debug())
}

func (v versionDo) WithContext(ctx context.Context) *versionDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v versionDo) ReadDB() *versionDo {
	return v.Clauses(dbresolver.Read)
}

func (v versionDo) WriteDB() *versionDo {
	return v.Clauses(dbresolver.Write)
}

func (v versionDo) Session(config *gorm.Session) *versionDo {
	return v.withDO(v.DO.Session(config))
}

func (v versionDo) Clauses(conds ...clause.Expression) *versionDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v versionDo) Returning(value interface{}, columns ...string) *versionDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v versionDo) Not(conds ...gen.Condition) *versionDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v versionDo) Or(conds ...gen.Condition) *versionDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v versionDo) Select(conds ...field.Expr) *versionDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v versionDo) Where(conds ...gen.Condition) *versionDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v versionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *versionDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v versionDo) Order(conds ...field.Expr) *versionDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v versionDo) Distinct(cols ...field.Expr) *versionDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v versionDo) Omit(cols ...field.Expr) *versionDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v versionDo) Join(table schema.Tabler, on ...field.Expr) *versionDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v versionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *versionDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v versionDo) RightJoin(table schema.Tabler, on ...field.Expr) *versionDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v versionDo) Group(cols ...field.Expr) *versionDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v versionDo) Having(conds ...gen.Condition) *versionDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v versionDo) Limit(limit int) *versionDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v versionDo) Offset(offset int) *versionDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v versionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *versionDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v versionDo) Unscoped() *versionDo {
	return v.withDO(v.DO.Unscoped())
}

func (v versionDo) Create(values ...*model.Version) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v versionDo) CreateInBatches(values []*model.Version, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v versionDo) Save(values ...*model.Version) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v versionDo) First() (*model.Version, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Version), nil
	}
}

func (v versionDo) Take() (*model.Version, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Version), nil
	}
}

func (v versionDo) Last() (*model.Version, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Version), nil
	}
}

func (v versionDo) Find() ([]*model.Version, error) {
	result, err := v.DO.Find()
	return result.([]*model.Version), err
}

func (v versionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Version, err error) {
	buf := make([]*model.Version, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v versionDo) FindInBatches(result *[]*model.Version, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v versionDo) Attrs(attrs ...field.AssignExpr) *versionDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v versionDo) Assign(attrs ...field.AssignExpr) *versionDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v versionDo) Joins(fields ...field.RelationField) *versionDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v versionDo) Preload(fields ...field.RelationField) *versionDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v versionDo) FirstOrInit() (*model.Version, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Version), nil
	}
}

func (v versionDo) FirstOrCreate() (*model.Version, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Version), nil
	}
}

func (v versionDo) FindByPage(offset int, limit int) (result []*model.Version, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v versionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v versionDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v versionDo) Delete(models ...*model.Version) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *versionDo) withDO(do gen.Dao) *versionDo {
	v.DO = *do.(*gen.DO)
	return v
}
