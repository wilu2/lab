// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.intsig.net/textin-gateway/internal/apiserver/dal/model"
)

func newOptlog(db *gorm.DB, opts ...gen.DOOption) optlog {
	_optlog := optlog{}

	_optlog.optlogDo.UseDB(db, opts...)
	_optlog.optlogDo.UseModel(&model.Optlog{})

	tableName := _optlog.optlogDo.TableName()
	_optlog.ALL = field.NewAsterisk(tableName)
	_optlog.ID = field.NewInt32(tableName, "id")
	_optlog.Operation = field.NewString(tableName, "operation")
	_optlog.Resource = field.NewString(tableName, "resource")
	_optlog.ResourceType = field.NewString(tableName, "resource_type")
	_optlog.UserID = field.NewInt32(tableName, "user_id")
	_optlog.ReqBody = field.NewString(tableName, "req_body")
	_optlog.OptTime = field.NewTime(tableName, "opt_time")

	_optlog.fillFieldMap()

	return _optlog
}

type optlog struct {
	optlogDo optlogDo

	ALL          field.Asterisk
	ID           field.Int32
	Operation    field.String
	Resource     field.String
	ResourceType field.String
	UserID       field.Int32
	ReqBody      field.String
	OptTime      field.Time

	fieldMap map[string]field.Expr
}

func (o optlog) Table(newTableName string) *optlog {
	o.optlogDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o optlog) As(alias string) *optlog {
	o.optlogDo.DO = *(o.optlogDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *optlog) updateTableName(table string) *optlog {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt32(table, "id")
	o.Operation = field.NewString(table, "operation")
	o.Resource = field.NewString(table, "resource")
	o.ResourceType = field.NewString(table, "resource_type")
	o.UserID = field.NewInt32(table, "user_id")
	o.ReqBody = field.NewString(table, "req_body")
	o.OptTime = field.NewTime(table, "opt_time")

	o.fillFieldMap()

	return o
}

func (o *optlog) WithContext(ctx context.Context) *optlogDo { return o.optlogDo.WithContext(ctx) }

func (o optlog) TableName() string { return o.optlogDo.TableName() }

func (o optlog) Alias() string { return o.optlogDo.Alias() }

func (o *optlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *optlog) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 7)
	o.fieldMap["id"] = o.ID
	o.fieldMap["operation"] = o.Operation
	o.fieldMap["resource"] = o.Resource
	o.fieldMap["resource_type"] = o.ResourceType
	o.fieldMap["user_id"] = o.UserID
	o.fieldMap["req_body"] = o.ReqBody
	o.fieldMap["opt_time"] = o.OptTime
}

func (o optlog) clone(db *gorm.DB) optlog {
	o.optlogDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o optlog) replaceDB(db *gorm.DB) optlog {
	o.optlogDo.ReplaceDB(db)
	return o
}

type optlogDo struct{ gen.DO }

func (o optlogDo) Debug() *optlogDo {
	return o.withDO(o.DO.Debug())
}

func (o optlogDo) WithContext(ctx context.Context) *optlogDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o optlogDo) ReadDB() *optlogDo {
	return o.Clauses(dbresolver.Read)
}

func (o optlogDo) WriteDB() *optlogDo {
	return o.Clauses(dbresolver.Write)
}

func (o optlogDo) Session(config *gorm.Session) *optlogDo {
	return o.withDO(o.DO.Session(config))
}

func (o optlogDo) Clauses(conds ...clause.Expression) *optlogDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o optlogDo) Returning(value interface{}, columns ...string) *optlogDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o optlogDo) Not(conds ...gen.Condition) *optlogDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o optlogDo) Or(conds ...gen.Condition) *optlogDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o optlogDo) Select(conds ...field.Expr) *optlogDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o optlogDo) Where(conds ...gen.Condition) *optlogDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o optlogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *optlogDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o optlogDo) Order(conds ...field.Expr) *optlogDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o optlogDo) Distinct(cols ...field.Expr) *optlogDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o optlogDo) Omit(cols ...field.Expr) *optlogDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o optlogDo) Join(table schema.Tabler, on ...field.Expr) *optlogDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o optlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *optlogDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o optlogDo) RightJoin(table schema.Tabler, on ...field.Expr) *optlogDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o optlogDo) Group(cols ...field.Expr) *optlogDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o optlogDo) Having(conds ...gen.Condition) *optlogDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o optlogDo) Limit(limit int) *optlogDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o optlogDo) Offset(offset int) *optlogDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o optlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *optlogDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o optlogDo) Unscoped() *optlogDo {
	return o.withDO(o.DO.Unscoped())
}

func (o optlogDo) Create(values ...*model.Optlog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o optlogDo) CreateInBatches(values []*model.Optlog, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o optlogDo) Save(values ...*model.Optlog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o optlogDo) First() (*model.Optlog, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Optlog), nil
	}
}

func (o optlogDo) Take() (*model.Optlog, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Optlog), nil
	}
}

func (o optlogDo) Last() (*model.Optlog, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Optlog), nil
	}
}

func (o optlogDo) Find() ([]*model.Optlog, error) {
	result, err := o.DO.Find()
	return result.([]*model.Optlog), err
}

func (o optlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Optlog, err error) {
	buf := make([]*model.Optlog, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o optlogDo) FindInBatches(result *[]*model.Optlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o optlogDo) Attrs(attrs ...field.AssignExpr) *optlogDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o optlogDo) Assign(attrs ...field.AssignExpr) *optlogDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o optlogDo) Joins(fields ...field.RelationField) *optlogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o optlogDo) Preload(fields ...field.RelationField) *optlogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o optlogDo) FirstOrInit() (*model.Optlog, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Optlog), nil
	}
}

func (o optlogDo) FirstOrCreate() (*model.Optlog, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Optlog), nil
	}
}

func (o optlogDo) FindByPage(offset int, limit int) (result []*model.Optlog, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o optlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o optlogDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o optlogDo) Delete(models ...*model.Optlog) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *optlogDo) withDO(do gen.Dao) *optlogDo {
	o.DO = *do.(*gen.DO)
	return o
}
